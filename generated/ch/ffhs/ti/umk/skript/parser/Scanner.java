/* The following code was generated by JFlex 1.4.3 on 06.07.15 20:35 */

package ch.ffhs.ti.umk.skript.parser;

import static ch.ffhs.ti.umk.skript.parser.Terminals.*;
import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 06.07.15 20:35 from the specification file
 * <tt>/Users/thierrybaumann/Documents/workspace/vac_compiler/grammar/Scanner.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  private static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  private static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\56\1\1\1\4\2\0\1\2\16\56\4\0\1\1\1\42\1\0"+
    "\1\11\1\55\1\10\2\0\1\15\1\16\1\7\1\6\1\21\1\5"+
    "\1\0\1\3\12\54\1\13\1\30\1\43\1\14\1\44\2\0\1\47"+
    "\2\55\1\35\1\33\1\32\1\55\1\41\1\31\2\55\1\36\1\55"+
    "\1\34\1\45\2\55\1\46\1\37\3\55\1\40\3\55\3\0\1\12"+
    "\1\55\1\0\1\23\3\55\1\51\1\25\5\55\1\52\1\55\1\27"+
    "\3\55\1\24\1\53\1\50\1\26\1\22\4\55\1\17\1\2\1\20"+
    "\1\0\41\56\2\0\4\55\4\0\1\55\2\0\1\56\7\0\1\55"+
    "\4\0\1\55\5\0\27\55\1\0\37\55\1\0\u01ca\55\4\0\14\55"+
    "\16\0\5\55\7\0\1\55\1\0\1\55\21\0\160\56\5\55\1\0"+
    "\2\55\2\0\4\55\10\0\1\55\1\0\3\55\1\0\1\55\1\0"+
    "\24\55\1\0\123\55\1\0\213\55\1\0\5\56\2\0\236\55\11\0"+
    "\46\55\2\0\1\55\7\0\47\55\11\0\55\56\1\0\1\56\1\0"+
    "\2\56\1\0\2\56\1\0\1\56\10\0\33\55\5\0\3\55\15\0"+
    "\4\56\7\0\1\55\4\0\13\56\5\0\53\55\37\56\4\0\2\55"+
    "\1\56\143\55\1\0\1\55\10\56\1\0\6\56\2\55\2\56\1\0"+
    "\4\56\2\55\12\56\3\55\2\0\1\55\17\0\1\56\1\55\1\56"+
    "\36\55\33\56\2\0\131\55\13\56\1\55\16\0\12\56\41\55\11\56"+
    "\2\55\4\0\1\55\5\0\26\55\4\56\1\55\11\56\1\55\3\56"+
    "\1\55\5\56\22\0\31\55\3\56\244\0\4\56\66\55\3\56\1\55"+
    "\22\56\1\55\7\56\12\55\2\56\2\0\12\56\1\0\7\55\1\0"+
    "\7\55\1\0\3\56\1\0\10\55\2\0\2\55\2\0\26\55\1\0"+
    "\7\55\1\0\1\55\3\0\4\55\2\0\1\56\1\55\7\56\2\0"+
    "\2\56\2\0\3\56\1\55\10\0\1\56\4\0\2\55\1\0\3\55"+
    "\2\56\2\0\12\56\4\55\7\0\1\55\5\0\3\56\1\0\6\55"+
    "\4\0\2\55\2\0\26\55\1\0\7\55\1\0\2\55\1\0\2\55"+
    "\1\0\2\55\2\0\1\56\1\0\5\56\4\0\2\56\2\0\3\56"+
    "\3\0\1\56\7\0\4\55\1\0\1\55\7\0\14\56\3\55\1\56"+
    "\13\0\3\56\1\0\11\55\1\0\3\55\1\0\26\55\1\0\7\55"+
    "\1\0\2\55\1\0\5\55\2\0\1\56\1\55\10\56\1\0\3\56"+
    "\1\0\3\56\2\0\1\55\17\0\2\55\2\56\2\0\12\56\1\0"+
    "\1\55\17\0\3\56\1\0\10\55\2\0\2\55\2\0\26\55\1\0"+
    "\7\55\1\0\2\55\1\0\5\55\2\0\1\56\1\55\7\56\2\0"+
    "\2\56\2\0\3\56\10\0\2\56\4\0\2\55\1\0\3\55\2\56"+
    "\2\0\12\56\1\0\1\55\20\0\1\56\1\55\1\0\6\55\3\0"+
    "\3\55\1\0\4\55\3\0\2\55\1\0\1\55\1\0\2\55\3\0"+
    "\2\55\3\0\3\55\3\0\14\55\4\0\5\56\3\0\3\56\1\0"+
    "\4\56\2\0\1\55\6\0\1\56\16\0\12\56\11\0\1\55\7\0"+
    "\3\56\1\0\10\55\1\0\3\55\1\0\27\55\1\0\12\55\1\0"+
    "\5\55\3\0\1\55\7\56\1\0\3\56\1\0\4\56\7\0\2\56"+
    "\1\0\2\55\6\0\2\55\2\56\2\0\12\56\22\0\2\56\1\0"+
    "\10\55\1\0\3\55\1\0\27\55\1\0\12\55\1\0\5\55\2\0"+
    "\1\56\1\55\7\56\1\0\3\56\1\0\4\56\7\0\2\56\7\0"+
    "\1\55\1\0\2\55\2\56\2\0\12\56\1\0\2\55\17\0\2\56"+
    "\1\0\10\55\1\0\3\55\1\0\51\55\2\0\1\55\7\56\1\0"+
    "\3\56\1\0\4\56\1\55\10\0\1\56\10\0\2\55\2\56\2\0"+
    "\12\56\12\0\6\55\2\0\2\56\1\0\22\55\3\0\30\55\1\0"+
    "\11\55\1\0\1\55\2\0\7\55\3\0\1\56\4\0\6\56\1\0"+
    "\1\56\1\0\10\56\22\0\2\56\15\0\60\55\1\56\2\55\7\56"+
    "\4\0\10\55\10\56\1\0\12\56\47\0\2\55\1\0\1\55\2\0"+
    "\2\55\1\0\1\55\2\0\1\55\6\0\4\55\1\0\7\55\1\0"+
    "\3\55\1\0\1\55\1\0\1\55\2\0\2\55\1\0\4\55\1\56"+
    "\2\55\6\56\1\0\2\56\1\55\2\0\5\55\1\0\1\55\1\0"+
    "\6\56\2\0\12\56\2\0\2\55\42\0\1\55\27\0\2\56\6\0"+
    "\12\56\13\0\1\56\1\0\1\56\1\0\1\56\4\0\2\56\10\55"+
    "\1\0\44\55\4\0\24\56\1\0\2\56\5\55\13\56\1\0\44\56"+
    "\11\0\1\56\71\0\53\55\24\56\1\55\12\56\6\0\6\55\4\56"+
    "\4\55\3\56\1\55\3\56\2\55\7\56\3\55\4\56\15\55\14\56"+
    "\1\55\17\56\2\0\46\55\12\0\53\55\1\0\1\55\3\0\u0149\55"+
    "\1\0\4\55\2\0\7\55\1\0\1\55\1\0\4\55\2\0\51\55"+
    "\1\0\4\55\2\0\41\55\1\0\4\55\2\0\7\55\1\0\1\55"+
    "\1\0\4\55\2\0\17\55\1\0\71\55\1\0\4\55\2\0\103\55"+
    "\2\0\3\56\40\0\20\55\20\0\125\55\14\0\u026c\55\2\0\21\55"+
    "\1\0\32\55\5\0\113\55\3\0\3\55\17\0\15\55\1\0\4\55"+
    "\3\56\13\0\22\55\3\56\13\0\22\55\2\56\14\0\15\55\1\0"+
    "\3\55\1\0\2\56\14\0\64\55\40\56\3\0\1\55\3\0\2\55"+
    "\1\56\2\0\12\56\41\0\3\56\2\0\12\56\6\0\130\55\10\0"+
    "\51\55\1\56\1\55\5\0\106\55\12\0\35\55\3\0\14\56\4\0"+
    "\14\56\12\0\12\56\36\55\2\0\5\55\13\0\54\55\4\0\21\56"+
    "\7\55\2\56\6\0\12\56\46\0\27\55\5\56\4\0\65\55\12\56"+
    "\1\0\35\56\2\0\13\56\6\0\12\56\15\0\1\55\130\0\5\56"+
    "\57\55\21\56\7\55\4\0\12\56\21\0\11\56\14\0\3\56\36\55"+
    "\12\56\3\0\2\55\12\56\6\0\46\55\16\56\14\0\44\55\24\56"+
    "\10\0\12\56\3\0\3\55\12\56\44\55\122\0\3\56\1\0\25\56"+
    "\4\55\1\56\4\55\1\56\15\0\300\55\47\56\25\0\4\56\u0116\55"+
    "\2\0\6\55\2\0\46\55\2\0\6\55\2\0\10\55\1\0\1\55"+
    "\1\0\1\55\1\0\1\55\1\0\37\55\2\0\65\55\1\0\7\55"+
    "\1\0\1\55\3\0\3\55\1\0\7\55\3\0\4\55\2\0\6\55"+
    "\4\0\15\55\5\0\3\55\1\0\7\55\16\0\5\56\32\0\5\56"+
    "\20\0\2\55\23\0\1\55\13\0\5\56\5\0\6\56\1\0\1\55"+
    "\15\0\1\55\20\0\15\55\3\0\32\55\26\0\15\56\4\0\1\56"+
    "\3\0\14\56\21\0\1\55\4\0\1\55\2\0\12\55\1\0\1\55"+
    "\3\0\5\55\6\0\1\55\1\0\1\55\1\0\1\55\1\0\4\55"+
    "\1\0\13\55\2\0\4\55\5\0\5\55\4\0\1\55\21\0\51\55"+
    "\u0a77\0\57\55\1\0\57\55\1\0\205\55\6\0\4\55\3\56\16\0"+
    "\46\55\12\0\66\55\11\0\1\55\17\0\1\56\27\55\11\0\7\55"+
    "\1\0\7\55\1\0\7\55\1\0\7\55\1\0\7\55\1\0\7\55"+
    "\1\0\7\55\1\0\7\55\1\0\40\56\57\0\1\55\u01d5\0\3\55"+
    "\31\0\11\55\6\56\1\0\5\55\2\0\5\55\4\0\126\55\2\0"+
    "\2\56\2\0\3\55\1\0\132\55\1\0\4\55\5\0\51\55\3\0"+
    "\136\55\21\0\33\55\65\0\20\55\u0200\0\u19b6\55\112\0\u51cc\55\64\0"+
    "\u048d\55\103\0\56\55\2\0\u010d\55\3\0\20\55\12\56\2\55\24\0"+
    "\57\55\1\56\14\0\2\56\1\0\31\55\10\0\120\55\2\56\45\0"+
    "\11\55\2\0\147\55\2\0\4\55\1\0\2\55\16\0\12\55\120\0"+
    "\10\55\1\56\3\55\1\56\4\55\1\56\27\55\5\56\20\0\1\55"+
    "\7\0\64\55\14\0\2\56\62\55\21\56\13\0\12\56\6\0\22\56"+
    "\6\55\3\0\1\55\4\0\12\56\34\55\10\56\2\0\27\55\15\56"+
    "\14\0\35\55\3\0\4\56\57\55\16\56\16\0\1\55\12\56\46\0"+
    "\51\55\16\56\11\0\3\55\1\56\10\55\2\56\2\0\12\56\6\0"+
    "\27\55\3\0\1\55\1\56\4\0\60\55\1\56\1\55\3\56\2\55"+
    "\2\56\5\55\2\56\1\55\1\56\1\55\30\0\3\55\43\0\6\55"+
    "\2\0\6\55\2\0\6\55\11\0\7\55\1\0\7\55\221\0\43\55"+
    "\10\56\1\0\2\56\2\0\12\56\6\0\u2ba4\55\14\0\27\55\4\0"+
    "\61\55\u2104\0\u012e\55\2\0\76\55\2\0\152\55\46\0\7\55\14\0"+
    "\5\55\5\0\1\55\1\56\12\55\1\0\15\55\1\0\5\55\1\0"+
    "\1\55\1\0\2\55\1\0\2\55\1\0\154\55\41\0\u016b\55\22\0"+
    "\100\55\2\0\66\55\50\0\15\55\3\0\20\56\20\0\7\56\14\0"+
    "\2\55\30\0\3\55\31\0\1\55\6\0\5\55\1\0\207\55\2\0"+
    "\1\56\4\0\1\55\13\0\12\56\7\0\32\55\4\0\1\55\1\0"+
    "\32\55\13\0\131\55\3\0\6\55\2\0\6\55\2\0\6\55\2\0"+
    "\3\55\3\0\2\55\3\0\2\55\22\0\3\56\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\2\1\1\13\1\14\1\15\1\16"+
    "\1\17\3\20\1\21\4\20\1\1\1\22\1\23\3\20"+
    "\1\24\1\2\1\25\1\26\3\20\1\27\4\20\1\30"+
    "\1\31\2\20\1\32\1\20\1\33\1\34\1\35\2\20"+
    "\1\36\2\20\1\37\1\20\1\40\1\41\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[63];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\57\0\57\0\57"+
    "\0\57\0\57\0\57\0\353\0\u011a\0\57\0\57\0\57"+
    "\0\57\0\57\0\u0149\0\u0178\0\u01a7\0\57\0\u01d6\0\u0205"+
    "\0\u0234\0\u0263\0\u0292\0\57\0\57\0\u02c1\0\u02f0\0\u031f"+
    "\0\u034e\0\u037d\0\57\0\57\0\u03ac\0\u03db\0\u040a\0\u0178"+
    "\0\u0439\0\u0468\0\u0497\0\u04c6\0\57\0\u0178\0\u04f5\0\u0524"+
    "\0\u0178\0\u0553\0\u0178\0\u0178\0\u0178\0\u0582\0\u05b1\0\u0178"+
    "\0\u05e0\0\u060f\0\u0178\0\u063e\0\u0178\0\u0178\0\u0178";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[63];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\2\24\1\25\2\24\1\26\1\27"+
    "\1\30\1\31\4\24\1\32\1\24\1\33\1\34\1\35"+
    "\1\36\1\24\1\37\1\40\3\24\1\41\1\24\1\2"+
    "\60\0\1\3\57\0\1\4\1\0\1\4\55\0\1\42"+
    "\67\0\1\43\56\0\1\44\64\0\1\24\1\45\4\24"+
    "\1\0\11\24\3\0\12\24\22\0\6\24\1\0\11\24"+
    "\3\0\12\24\22\0\1\24\1\46\2\24\1\47\1\24"+
    "\1\0\11\24\3\0\12\24\22\0\6\24\1\0\1\24"+
    "\1\50\7\24\3\0\12\24\22\0\6\24\1\0\11\24"+
    "\3\0\1\51\11\24\22\0\6\24\1\0\3\24\1\52"+
    "\1\24\1\53\3\24\3\0\12\24\22\0\6\24\1\0"+
    "\10\24\1\54\3\0\12\24\14\0\1\55\64\0\6\24"+
    "\1\0\11\24\3\0\1\24\1\56\10\24\22\0\6\24"+
    "\1\0\3\24\1\57\5\24\3\0\12\24\22\0\2\24"+
    "\1\60\3\24\1\0\11\24\3\0\12\24\54\0\1\41"+
    "\2\0\4\42\1\0\52\42\22\0\2\24\1\61\3\24"+
    "\1\0\11\24\3\0\12\24\22\0\6\24\1\0\11\24"+
    "\3\0\5\24\1\62\4\24\22\0\5\24\1\63\1\0"+
    "\11\24\3\0\12\24\22\0\6\24\1\0\11\24\3\0"+
    "\1\24\1\64\10\24\22\0\6\24\1\0\4\24\1\65"+
    "\4\24\3\0\12\24\22\0\6\24\1\0\6\24\1\66"+
    "\2\24\3\0\12\24\22\0\6\24\1\0\1\67\10\24"+
    "\3\0\12\24\22\0\6\24\1\0\4\24\1\70\4\24"+
    "\3\0\12\24\22\0\4\24\1\71\1\24\1\0\11\24"+
    "\3\0\12\24\22\0\6\24\1\0\11\24\3\0\6\24"+
    "\1\72\3\24\22\0\6\24\1\0\2\24\1\73\6\24"+
    "\3\0\12\24\22\0\6\24\1\0\5\24\1\74\3\24"+
    "\3\0\12\24\22\0\6\24\1\0\11\24\3\0\4\24"+
    "\1\75\5\24\22\0\6\24\1\0\11\24\3\0\4\24"+
    "\1\76\5\24\22\0\6\24\1\0\2\24\1\77\6\24"+
    "\3\0\12\24";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1645];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\6\11\2\1\5\11\3\1\1\11"+
    "\5\1\2\11\5\1\2\11\10\1\1\11\22\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[63];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol sym(int type)
    {
         return new Symbol(type, yyline, yycolumn);
    }

    private Symbol sym(int type, boolean bValue)
    {
         return new Symbol(type, yyline, yycolumn, bValue);
    }

    private Symbol symVal(int type)
    {
         return new Symbol(type, yyline, yycolumn, yytext());
    }
   


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2216) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  private final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  private final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  private final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  private final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  private final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  private final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  private final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 17: 
          { return sym(SEMICOLON);
          }
        case 35: break;
        case 11: 
          { return sym(LPAR);
          }
        case 36: break;
        case 20: 
          { return symVal(NUMBER);
          }
        case 37: break;
        case 9: 
          { return sym(ROO);
          }
        case 38: break;
        case 26: 
          { return sym(VAR);
          }
        case 39: break;
        case 14: 
          { return sym(RBRACE);
          }
        case 40: break;
        case 33: 
          { return sym(BOOLCONST, false);
          }
        case 41: break;
        case 31: 
          { return sym(ELSE);
          }
        case 42: break;
        case 23: 
          { return sym(IF);
          }
        case 43: break;
        case 21: 
          { return sym(ASSIGN);
          }
        case 44: break;
        case 10: 
          { return sym(POW);
          }
        case 45: break;
        case 5: 
          { return sym(MINUS);
          }
        case 46: break;
        case 32: 
          { return sym(BOOLCONST, true);
          }
        case 47: break;
        case 28: 
          { return sym(FOR);
          }
        case 48: break;
        case 7: 
          { return sym(TIMES);
          }
        case 49: break;
        case 34: 
          { return sym(WHILE);
          }
        case 50: break;
        case 30: 
          { return sym(AND);
          }
        case 51: break;
        case 27: 
          { return sym(FUNCTION);
          }
        case 52: break;
        case 4: 
          { return sym(DIV);
          }
        case 53: break;
        case 24: 
          { return sym(NOTEQUAL);
          }
        case 54: break;
        case 19: 
          { return sym(BIGGER);
          }
        case 55: break;
        case 18: 
          { return sym(LESS);
          }
        case 56: break;
        case 6: 
          { return sym(PLUS);
          }
        case 57: break;
        case 13: 
          { return sym(LBRACE);
          }
        case 58: break;
        case 25: 
          { return sym(OR);
          }
        case 59: break;
        case 3: 
          { return sym(SEP);
          }
        case 60: break;
        case 22: 
          { return sym(EQUAL);
          }
        case 61: break;
        case 29: 
          { return sym(END);
          }
        case 62: break;
        case 12: 
          { return sym(RPAR);
          }
        case 63: break;
        case 8: 
          { return sym(MOD);
          }
        case 64: break;
        case 1: 
          { throw new RuntimeException("Illegal Symbol '" + yytext() + '\''
             + " in line " + yyline + ", column" + yycolumn);
          }
        case 65: break;
        case 16: 
          { return symVal(NAME);
          }
        case 66: break;
        case 15: 
          { return sym(COMMA);
          }
        case 67: break;
        case 2: 
          { 
          }
        case 68: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(Terminals.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
