
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jul 10 13:59:03 CEST 2015
//----------------------------------------------------

package ch.ffhs.ti.umk.skript.parser;

import java.util.ArrayList;
import java_cup.runtime.*;
import ch.ffhs.ti.umk.skript.instr.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jul 10 13:59:03 CEST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\006\000\002\024" +
    "\007\000\002\004\002\000\002\004\004\000\002\005\002" +
    "\000\002\005\004\000\002\003\002\000\002\003\004\000" +
    "\002\010\006\000\002\023\011\000\002\007\002\000\002" +
    "\007\004\000\002\007\005\000\002\006\002\000\002\006" +
    "\004\000\002\006\005\000\002\012\003\000\002\012\012" +
    "\000\002\012\015\000\002\012\012\000\002\012\012\000" +
    "\002\013\005\000\002\013\007\000\002\013\007\000\002" +
    "\011\006\000\002\017\003\000\002\017\004\000\002\017" +
    "\005\000\002\017\005\000\002\015\003\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\003\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\003\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\003\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\016\003\000\002\016\005\000" +
    "\002\020\005\000\002\020\004\000\002\022\005\000\002" +
    "\022\004\000\002\021\004\000\002\021\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\005\000\002\025\003" +
    "\000\002\025\005\000\002\025\005\000\002\026\003\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\027\002\000\002\027\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\032\002\ufffa\005\ufffa\013\ufffa\016\ufffa\020" +
    "\ufffa\021\ufffa\031\ufffa\033\ufffa\035\ufffa\041\ufffa\042\ufffa" +
    "\043\ufffa\001\002\000\004\002\210\001\002\000\032\002" +
    "\ufffc\005\ufffc\013\ufffc\016\ufffc\020\ufffc\021\ufffc\031\ufffc" +
    "\033\006\035\ufffc\041\ufffc\042\ufffc\043\ufffc\001\002\000" +
    "\004\043\205\001\002\000\034\002\ufff9\005\ufff9\013\ufff9" +
    "\016\ufff9\020\ufff9\021\ufff9\031\ufff9\033\ufff9\035\ufff9\037" +
    "\ufff9\041\ufff9\042\ufff9\043\ufff9\001\002\000\030\002\ufffe" +
    "\005\ufffe\013\ufffe\016\ufffe\020\ufffe\021\ufffe\031\ufffe\035" +
    "\ufffe\041\012\042\ufffe\043\ufffe\001\002\000\030\002\ufffb" +
    "\005\ufffb\013\ufffb\016\ufffb\020\ufffb\021\ufffb\031\ufffb\035" +
    "\ufffb\041\ufffb\042\ufffb\043\ufffb\001\002\000\004\043\167" +
    "\001\002\000\026\002\uffc0\005\027\013\021\016\023\020" +
    "\017\021\033\031\034\035\030\042\026\043\022\001\002" +
    "\000\034\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\032\uffdb" +
    "\034\uffdb\001\002\000\004\002\000\001\002\000\034\004" +
    "\uffe7\005\uffe7\006\047\007\046\010\045\022\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\027\uffe7\032\uffe7\034\uffe7\001" +
    "\002\000\004\031\160\001\002\000\010\004\041\005\042" +
    "\034\156\001\002\000\034\004\uffcc\005\uffcc\006\uffcc\007" +
    "\uffcc\010\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\032\uffcc\034\uffcc\001\002\000\030\004\uffcb\005" +
    "\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb" +
    "\014\uffcb\030\140\034\uffcb\001\002\000\004\031\124\001" +
    "\002\000\044\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3" +
    "\011\115\012\116\013\117\014\114\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\032\uffd3\034\uffd3\001\002" +
    "\000\034\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\032\uffd7" +
    "\034\uffd7\001\002\000\054\004\uffca\005\uffca\006\uffca\007" +
    "\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca\022\uffca" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\031\uffca\032" +
    "\uffca\034\uffca\040\uffca\042\uffca\043\uffca\001\002\000\012" +
    "\013\021\031\034\042\026\043\040\001\002\000\004\002" +
    "\uffbf\001\002\000\034\002\ufff0\005\ufff0\013\ufff0\015\ufff0" +
    "\016\ufff0\017\ufff0\020\ufff0\021\ufff0\031\ufff0\035\ufff0\037" +
    "\ufff0\042\ufff0\043\ufff0\001\002\000\034\002\ufffd\005\ufffd" +
    "\013\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\031" +
    "\ufffd\035\ufffd\037\ufffd\042\ufffd\043\ufffd\001\002\000\004" +
    "\031\065\001\002\000\014\005\027\013\021\031\034\042" +
    "\026\043\040\001\002\000\034\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\032\uffdf\034\uffdf\001\002\000\034\004\uffe3" +
    "\005\uffe3\006\uffe3\007\uffe3\010\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\032\uffe3\034\uffe3\001\002" +
    "\000\010\004\041\005\042\032\043\001\002\000\054\004" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb" +
    "\013\uffcb\014\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\031\uffcb\032\uffcb\034\uffcb\040\uffcb\042\uffcb" +
    "\043\uffcb\001\002\000\012\013\021\031\034\042\026\043" +
    "\040\001\002\000\012\013\021\031\034\042\026\043\040" +
    "\001\002\000\054\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010" +
    "\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\027\uffc9\031\uffc9\032\uffc9\034" +
    "\uffc9\040\uffc9\042\uffc9\043\uffc9\001\002\000\034\004\uffe4" +
    "\005\uffe4\006\047\007\046\010\045\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\032\uffe4\034\uffe4\001\002" +
    "\000\012\013\021\031\034\042\026\043\040\001\002\000" +
    "\012\013\021\031\034\042\026\043\040\001\002\000\012" +
    "\013\021\031\034\042\026\043\040\001\002\000\034\004" +
    "\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\022\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\027\uffd6\032\uffd6\034\uffd6\001" +
    "\002\000\034\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda" +
    "\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\032" +
    "\uffda\034\uffda\001\002\000\034\004\uffe2\005\uffe2\006\uffe2" +
    "\007\uffe2\010\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\032\uffe2\034\uffe2\001\002\000\034\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\026\uffde\027\uffde\032\uffde\034\uffde\001\002" +
    "\000\034\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\022" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\032\uffd5" +
    "\034\uffd5\001\002\000\034\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9" +
    "\027\uffd9\032\uffd9\034\uffd9\001\002\000\034\004\uffe1\005" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\032\uffe1\034\uffe1\001\002\000" +
    "\034\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\032\uffdd\034" +
    "\uffdd\001\002\000\034\004\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\010\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\032\uffd4\034\uffd4\001\002\000\034\004\uffd8\005\uffd8" +
    "\006\uffd8\007\uffd8\010\uffd8\022\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\026\uffd8\027\uffd8\032\uffd8\034\uffd8\001\002\000\034" +
    "\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\032\uffe0\034\uffe0" +
    "\001\002\000\034\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\032\uffdc\034\uffdc\001\002\000\034\004\uffe5\005\uffe5\006" +
    "\047\007\046\010\045\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\027\uffe5\032\uffe5\034\uffe5\001\002\000\016\005" +
    "\027\013\021\031\034\042\026\043\040\044\067\001\002" +
    "\000\016\004\041\005\042\022\103\023\106\024\104\025" +
    "\105\001\002\000\010\026\uffc5\027\uffc5\032\uffc5\001\002" +
    "\000\010\026\100\027\077\032\uffc8\001\002\000\004\032" +
    "\072\001\002\000\004\035\073\001\002\000\024\005\ufffe" +
    "\013\ufffe\015\ufffe\016\ufffe\020\ufffe\021\ufffe\031\ufffe\042" +
    "\ufffe\043\ufffe\001\002\000\024\005\027\013\021\015\075" +
    "\016\023\020\017\021\033\031\034\042\026\043\022\001" +
    "\002\000\004\035\076\001\002\000\034\002\uffed\005\uffed" +
    "\013\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\031" +
    "\uffed\035\uffed\037\uffed\042\uffed\043\uffed\001\002\000\016" +
    "\005\027\013\021\031\034\042\026\043\040\044\067\001" +
    "\002\000\016\005\027\013\021\031\034\042\026\043\040" +
    "\044\067\001\002\000\004\032\uffc7\001\002\000\004\032" +
    "\uffc6\001\002\000\014\005\027\013\021\031\034\042\026" +
    "\043\040\001\002\000\014\005\027\013\021\031\034\042" +
    "\026\043\040\001\002\000\014\005\027\013\021\031\034" +
    "\042\026\043\040\001\002\000\014\005\027\013\021\031" +
    "\034\042\026\043\040\001\002\000\014\004\041\005\042" +
    "\026\uffc3\027\uffc3\032\uffc3\001\002\000\014\004\041\005" +
    "\042\026\uffc1\027\uffc1\032\uffc1\001\002\000\014\004\041" +
    "\005\042\026\uffc2\027\uffc2\032\uffc2\001\002\000\014\004" +
    "\041\005\042\026\uffc4\027\uffc4\032\uffc4\001\002\000\034" +
    "\004\uffe6\005\uffe6\006\047\007\046\010\045\022\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\032\uffe6\034\uffe6" +
    "\001\002\000\042\004\uffce\005\uffce\006\uffce\007\uffce\010" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\031\034\032\uffce\034\uffce\042\026\043\040\001\002\000" +
    "\010\031\034\042\026\043\040\001\002\000\042\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\010\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\031\034\032\uffd0\034\uffd0" +
    "\042\026\043\040\001\002\000\034\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\027\uffcd\032\uffcd\034\uffcd\001\002\000\034\004" +
    "\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\032\uffd1\034\uffd1\001" +
    "\002\000\036\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3" +
    "\011\115\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\032\uffd3\034\uffd3\001\002\000\034\004\uffd2\005\uffd2" +
    "\006\uffd2\007\uffd2\010\uffd2\022\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\032\uffd2\034\uffd2\001\002\000\034" +
    "\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\022\uffcf\023" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\032\uffcf\034\uffcf" +
    "\001\002\000\016\005\027\013\021\031\034\042\026\043" +
    "\040\044\067\001\002\000\004\032\126\001\002\000\004" +
    "\035\127\001\002\000\026\005\ufffe\013\ufffe\015\ufffe\016" +
    "\ufffe\017\ufffe\020\ufffe\021\ufffe\031\ufffe\042\ufffe\043\ufffe" +
    "\001\002\000\026\005\027\013\021\015\132\016\023\017" +
    "\131\020\017\021\033\031\034\042\026\043\022\001\002" +
    "\000\004\035\134\001\002\000\004\035\133\001\002\000" +
    "\034\002\uffef\005\uffef\013\uffef\015\uffef\016\uffef\017\uffef" +
    "\020\uffef\021\uffef\031\uffef\035\uffef\037\uffef\042\uffef\043" +
    "\uffef\001\002\000\024\005\ufffe\013\ufffe\015\ufffe\016\ufffe" +
    "\020\ufffe\021\ufffe\031\ufffe\042\ufffe\043\ufffe\001\002\000" +
    "\024\005\027\013\021\015\136\016\023\020\017\021\033" +
    "\031\034\042\026\043\022\001\002\000\004\035\137\001" +
    "\002\000\034\002\uffee\005\uffee\013\uffee\015\uffee\016\uffee" +
    "\017\uffee\020\uffee\021\uffee\031\uffee\035\uffee\037\uffee\042" +
    "\uffee\043\uffee\001\002\000\014\005\027\013\021\031\034" +
    "\042\026\043\143\001\002\000\010\004\041\005\042\034" +
    "\154\001\002\000\004\034\152\001\002\000\030\004\uffcb" +
    "\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\031\144\034\uffcb\001\002\000\014\031\ufff3" +
    "\032\ufff3\040\ufff3\042\ufff3\043\ufff3\001\002\000\014\031" +
    "\034\032\150\040\147\042\026\043\040\001\002\000\014" +
    "\031\ufff2\032\ufff2\040\ufff2\042\ufff2\043\ufff2\001\002\000" +
    "\010\031\034\042\026\043\040\001\002\000\004\034\uffe8" +
    "\001\002\000\014\031\ufff1\032\ufff1\040\ufff1\042\ufff1\043" +
    "\ufff1\001\002\000\004\035\153\001\002\000\040\002\uffe9" +
    "\005\uffe9\013\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021" +
    "\uffe9\031\uffe9\033\uffe9\035\uffe9\037\uffe9\041\uffe9\042\uffe9" +
    "\043\uffe9\001\002\000\004\035\155\001\002\000\040\002" +
    "\uffea\005\uffea\013\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\031\uffea\033\uffea\035\uffea\037\uffea\041\uffea\042" +
    "\uffea\043\uffea\001\002\000\004\035\157\001\002\000\040" +
    "\002\uffeb\005\uffeb\013\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\031\uffeb\033\uffeb\035\uffeb\037\uffeb\041\uffeb" +
    "\042\uffeb\043\uffeb\001\002\000\016\005\027\013\021\031" +
    "\034\042\026\043\040\044\067\001\002\000\004\032\162" +
    "\001\002\000\004\035\163\001\002\000\024\005\ufffe\013" +
    "\ufffe\015\ufffe\016\ufffe\020\ufffe\021\ufffe\031\ufffe\042\ufffe" +
    "\043\ufffe\001\002\000\024\005\027\013\021\015\165\016" +
    "\023\020\017\021\033\031\034\042\026\043\022\001\002" +
    "\000\004\035\166\001\002\000\034\002\uffec\005\uffec\013" +
    "\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\031\uffec" +
    "\035\uffec\037\uffec\042\uffec\043\uffec\001\002\000\004\031" +
    "\170\001\002\000\010\032\ufff6\040\ufff6\043\ufff6\001\002" +
    "\000\010\032\174\040\172\043\173\001\002\000\004\043" +
    "\204\001\002\000\010\032\ufff5\040\ufff5\043\ufff5\001\002" +
    "\000\004\036\175\001\002\000\004\035\200\001\002\000" +
    "\004\035\177\001\002\000\030\002\ufff7\005\ufff7\013\ufff7" +
    "\016\ufff7\020\ufff7\021\ufff7\031\ufff7\035\ufff7\041\ufff7\042" +
    "\ufff7\043\ufff7\001\002\000\026\005\ufffa\013\ufffa\016\ufffa" +
    "\020\ufffa\021\ufffa\031\ufffa\033\ufffa\037\ufffa\042\ufffa\043" +
    "\ufffa\001\002\000\026\005\ufffe\013\ufffe\016\ufffe\020\ufffe" +
    "\021\ufffe\031\ufffe\033\006\037\ufffe\042\ufffe\043\ufffe\001" +
    "\002\000\024\005\027\013\021\016\023\020\017\021\033" +
    "\031\034\037\203\042\026\043\022\001\002\000\004\035" +
    "\uffff\001\002\000\010\032\ufff4\040\ufff4\043\ufff4\001\002" +
    "\000\004\030\206\001\002\000\014\005\027\013\021\031" +
    "\034\042\026\043\022\001\002\000\034\002\ufff8\005\ufff8" +
    "\013\ufff8\016\ufff8\020\ufff8\021\ufff8\031\ufff8\033\ufff8\035" +
    "\ufff8\037\ufff8\041\ufff8\042\ufff8\043\ufff8\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\006\005\007\010\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\012\023\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\012\031\013\030" +
    "\014\023\015\015\016\035\017\017\020\013\021\024\022" +
    "\034\027\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\014" +
    "\023\015\112\016\035\020\013\021\024\022\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\014\023\015\015\016\035\017\036" +
    "\020\013\021\024\022\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\014\023\015\063\016\035\020\013\021\024\022\034\001" +
    "\001\000\016\014\023\015\043\016\035\020\013\021\024" +
    "\022\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\014\023\016\061\020\060\021\057\022\062\001\001" +
    "\000\014\014\023\016\055\020\054\021\053\022\056\001" +
    "\001\000\014\014\023\016\051\020\050\021\047\022\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\014\023\015\015\016\035\017\065\020" +
    "\013\021\024\022\034\025\070\026\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\073\001\001\000\024" +
    "\012\031\013\030\014\023\015\015\016\035\017\017\020" +
    "\013\021\024\022\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\014\023\015\015\016\035\017\065\020" +
    "\013\021\024\022\034\026\101\001\001\000\022\014\023" +
    "\015\015\016\035\017\065\020\013\021\024\022\034\026" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\014\023\015\015\016\035\017\111\020\013\021\024\022" +
    "\034\001\001\000\020\014\023\015\015\016\035\017\110" +
    "\020\013\021\024\022\034\001\001\000\020\014\023\015" +
    "\015\016\035\017\107\020\013\021\024\022\034\001\001" +
    "\000\020\014\023\015\015\016\035\017\106\020\013\021" +
    "\024\022\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\122\001\001\000\006\014\120\016\121\001\001" +
    "\000\004\014\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\014\023\015\015\016\035\017\065\020\013\021" +
    "\024\022\034\025\124\026\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\127\001\001\000\024\012" +
    "\031\013\030\014\023\015\015\016\035\017\017\020\013" +
    "\021\024\022\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\134\001\001\000\024" +
    "\012\031\013\030\014\023\015\015\016\035\017\017\020" +
    "\013\021\024\022\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\011\141\014\023\015\015\016\035\017" +
    "\140\020\013\021\024\022\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\144\001" +
    "\001\000\004\014\145\001\001\000\002\001\001\000\004" +
    "\014\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\014" +
    "\023\015\015\016\035\017\065\020\013\021\024\022\034" +
    "\025\160\026\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\163\001\001\000\024\012\031\013\030" +
    "\014\023\015\015\016\035\017\017\020\013\021\024\022" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\200\001\001\000\006\004\201\010\006\001\001" +
    "\000\024\012\031\013\030\014\023\015\015\016\035\017" +
    "\017\020\013\021\024\022\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\013\206\014" +
    "\023\015\015\016\035\017\017\020\013\021\024\022\034" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ENDE ::= SEP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENDE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ENDE ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENDE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CONDITION ::= SUM BIGGER SUM 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction p2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionCompareOpertor(BinaryOperator.BIGGER, p1, p2 ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONDITION ::= SUM LESS SUM 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction p2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionCompareOpertor(BinaryOperator.LESS, p1, p2 ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONDITION ::= SUM NOTEQUAL SUM 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction p2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionCompareOpertor(BinaryOperator.NOTEQUAL, p1, p2 ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONDITION ::= SUM EQUAL SUM 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction p2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionCompareOpertor(BinaryOperator.EQUAL, p1, p2 ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONDITION ::= BOOLCONST 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONDITIONAL_EXPRESSION ::= CONDITION AND CONDITION 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionAnd(c1,c2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONAL_EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDITIONAL_EXPRESSION ::= CONDITION OR CONDITION 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionOr(c1,c2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONAL_EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDITIONAL_EXPRESSION ::= CONDITION 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONAL_EXPRESSION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SIMPLE_TERM ::= LPAR SUM RPAR 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_TERM",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SIMPLE_TERM ::= NUMBER 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = InstructionConstant.integer(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_TERM",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SIMPLE_TERM ::= NAME 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionGetVariable(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_TERM",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RANDOM ::= RAND 
            {
              Instruction RESULT =null;
		 RESULT = new InstructionSymbolOperation(BinaryOperator.RAND); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RANDOM",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // RANDOM ::= SIMPLE_TERM RAND 
            {
              Instruction RESULT =null;
		int srleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int srright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction sr = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstructionOneVarOperation(BinaryOperator.RAND, sr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RANDOM",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LOGARITHM ::= SIMPLE_TERM LOG 
            {
              Instruction RESULT =null;
		int srleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int srright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction sr = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstructionOneVarOperation(BinaryOperator.LOG, sr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGARITHM",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LOGARITHM ::= SIMPLE_TERM LOG SIMPLE_TERM 
            {
              Instruction RESULT =null;
		int srleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int srright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction sr = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction sst = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.LOG, sr, sst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGARITHM",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ROOT ::= SIMPLE_TERM ROO 
            {
              Instruction RESULT =null;
		int srleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int srright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction sr = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstructionOneVarOperation(BinaryOperator.ROO, sr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROOT",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ROOT ::= SIMPLE_TERM ROO SIMPLE_TERM 
            {
              Instruction RESULT =null;
		int srleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int srright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction sr = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction sst = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.ROO, sr, sst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROOT",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // POWER ::= SIMPLE_TERM POW POWER 
            {
              Instruction RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction st = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.POW, st, pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("POWER",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // POWER ::= SIMPLE_TERM 
            {
              Instruction RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction st = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = st; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("POWER",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PRODUCT ::= PRODUCT MOD RANDOM 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.MOD, p, pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PRODUCT ::= PRODUCT DIV RANDOM 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.DIV, p, pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PRODUCT ::= PRODUCT TIMES RANDOM 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.TIMES, p, pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PRODUCT ::= RANDOM 
            {
              Instruction RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PRODUCT ::= PRODUCT MOD ROOT 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.MOD, p, pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PRODUCT ::= PRODUCT DIV ROOT 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.DIV, p, pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PRODUCT ::= PRODUCT TIMES ROOT 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.TIMES, p, pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PRODUCT ::= ROOT 
            {
              Instruction RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PRODUCT ::= PRODUCT MOD LOGARITHM 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.MOD, p, pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PRODUCT ::= PRODUCT DIV LOGARITHM 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.DIV, p, pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PRODUCT ::= PRODUCT TIMES LOGARITHM 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.TIMES, p, pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PRODUCT ::= LOGARITHM 
            {
              Instruction RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PRODUCT ::= PRODUCT MOD POWER 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.MOD, p, pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PRODUCT ::= PRODUCT DIV POWER 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.DIV, p, pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PRODUCT ::= PRODUCT TIMES POWER 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.TIMES, p, pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PRODUCT ::= POWER 
            {
              Instruction RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SUM ::= SUM MINUS PRODUCT 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.MINUS, s, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUM",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SUM ::= SUM PLUS PRODUCT 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.PLUS, s, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUM",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SUM ::= MINUS PRODUCT 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionNegate(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUM",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SUM ::= PRODUCT 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUM",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // METHOD_CALL ::= NAME LPAR ARGUMENT_LIST RPAR 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> al = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstructionMethodCall(n,al); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD_CALL",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SINGLE_LINE_STATEMENT ::= NAME ASSIGN METHOD_CALL SEMICOLON SEP 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction m = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new InstructionSetVariable(n, m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SINGLE_LINE_STATEMENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SINGLE_LINE_STATEMENT ::= NAME ASSIGN SUM SEMICOLON SEP 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new InstructionSetVariable(n, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SINGLE_LINE_STATEMENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SINGLE_LINE_STATEMENT ::= SUM SEMICOLON SEP 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SINGLE_LINE_STATEMENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STATEMENT ::= WHILE LPAR CONDITIONAL_EXPRESSION RPAR SEP STATEMENT_LIST END SEP 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> s = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new InstructionForWhile(s, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STATEMENT ::= FOR LPAR CONDITIONAL_EXPRESSION RPAR SEP STATEMENT_LIST END SEP 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> s = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new InstructionForWhile(s, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STATEMENT ::= IF LPAR CONDITIONAL_EXPRESSION RPAR SEP STATEMENT_LIST ELSE SEP STATEMENT_LIST END SEP 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<Instruction> s1 = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> s2 = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new InstructionIfElse(s1, s2, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STATEMENT ::= IF LPAR CONDITIONAL_EXPRESSION RPAR SEP STATEMENT_LIST END SEP 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> s1 = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new InstructionIfElse(s1, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STATEMENT ::= SINGLE_LINE_STATEMENT 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARGUMENT_LIST ::= ARGUMENT_LIST COMMA SIMPLE_TERM 
            {
              ArrayList<Instruction> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> al = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = al; RESULT.add(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENT_LIST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARGUMENT_LIST ::= ARGUMENT_LIST SIMPLE_TERM 
            {
              ArrayList<Instruction> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> al = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = al; RESULT.add(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENT_LIST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ARGUMENT_LIST ::= 
            {
              ArrayList<Instruction> RESULT =null;
		  RESULT = new ArrayList<Instruction>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENT_LIST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARAMETER_LIST ::= PARAMETER_LIST COMMA NAME 
            {
              ArrayList<String> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = pl; RESULT.add(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER_LIST",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAMETER_LIST ::= PARAMETER_LIST NAME 
            {
              ArrayList<String> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = pl; RESULT.add(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER_LIST",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAMETER_LIST ::= 
            {
              ArrayList<String> RESULT =null;
		  RESULT = new ArrayList<String>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER_LIST",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // METHOD ::= FUNCTION NAME LPAR PARAMETER_LIST RPAR BLOCK SEP 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstructionMethod(n, pl, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ASSIGNMENT ::= VAR NAME ASSIGN SINGLE_LINE_STATEMENT 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionInitVariable(n, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ASSIGNMENT_LIST ::= ASSIGNMENT_LIST ASSIGNMENT 
            {
              ArrayList<Instruction> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> al = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = al; RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_LIST",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ASSIGNMENT_LIST ::= 
            {
              ArrayList<Instruction> RESULT =null;
		  RESULT = new ArrayList<Instruction>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_LIST",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // METHOD_LIST ::= METHOD_LIST METHOD 
            {
              ArrayList<Instruction> RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> ml = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction m = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = ml; RESULT.add(m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // METHOD_LIST ::= 
            {
              ArrayList<Instruction> RESULT =null;
		  RESULT = new ArrayList<Instruction>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STATEMENT_LIST ::= STATEMENT_LIST STATEMENT 
            {
              ArrayList<Instruction> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> sl = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = sl;  RESULT.add(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT_LIST",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STATEMENT_LIST ::= 
            {
              ArrayList<Instruction> RESULT =null;
		  RESULT = new ArrayList<Instruction>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT_LIST",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOCK ::= LBRACE SEP ASSIGNMENT_LIST STATEMENT_LIST RBRACE 
            {
              Instruction RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> al = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> sl = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstructionBlock(al, sl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SCRIPT ::= ASSIGNMENT_LIST METHOD_LIST STATEMENT_LIST ENDE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Instruction> a = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int mlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> ml = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> s = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstructionScript(a, ml, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SCRIPT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction start_val = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

