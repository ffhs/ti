
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jul 06 21:40:52 CEST 2015
//----------------------------------------------------

package ch.ffhs.ti.umk.skript.parser;

import java.util.ArrayList;
import java_cup.runtime.*;
import ch.ffhs.ti.umk.skript.instr.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jul 06 21:40:52 CEST 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\006\000\002\022" +
    "\007\000\002\004\002\000\002\004\004\000\002\005\002" +
    "\000\002\005\004\000\002\003\002\000\002\003\004\000" +
    "\002\010\006\000\002\021\011\000\002\007\002\000\002" +
    "\007\004\000\002\007\005\000\002\006\002\000\002\006" +
    "\004\000\002\006\005\000\002\012\003\000\002\012\012" +
    "\000\002\012\015\000\002\012\012\000\002\012\012\000" +
    "\002\013\005\000\002\013\007\000\002\013\007\000\002" +
    "\011\006\000\002\017\003\000\002\017\004\000\002\017" +
    "\005\000\002\017\005\000\002\015\003\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\003\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\016\003\000\002\016\005\000\002\020\005\000\002\014" +
    "\003\000\002\014\003\000\002\014\005\000\002\023\003" +
    "\000\002\023\005\000\002\023\005\000\002\024\003\000" +
    "\002\024\005\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\025\002\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\030\002\ufffa\005\ufffa\014\ufffa\016\ufffa\017" +
    "\ufffa\027\ufffa\031\ufffa\033\ufffa\037\ufffa\040\ufffa\041\ufffa" +
    "\001\002\000\004\002\174\001\002\000\030\002\ufffc\005" +
    "\ufffc\014\ufffc\016\ufffc\017\ufffc\027\ufffc\031\006\033\ufffc" +
    "\037\ufffc\040\ufffc\041\ufffc\001\002\000\004\041\171\001" +
    "\002\000\032\002\ufff9\005\ufff9\014\ufff9\016\ufff9\017\ufff9" +
    "\027\ufff9\031\ufff9\033\ufff9\035\ufff9\037\ufff9\040\ufff9\041" +
    "\ufff9\001\002\000\026\002\ufffe\005\ufffe\014\ufffe\016\ufffe" +
    "\017\ufffe\027\ufffe\033\ufffe\037\012\040\ufffe\041\ufffe\001" +
    "\002\000\026\002\ufffb\005\ufffb\014\ufffb\016\ufffb\017\ufffb" +
    "\027\ufffb\033\ufffb\037\ufffb\040\ufffb\041\ufffb\001\002\000" +
    "\004\041\153\001\002\000\024\002\uffcd\005\014\014\025" +
    "\016\015\017\017\027\022\033\024\040\020\041\033\001" +
    "\002\000\010\027\022\040\020\041\044\001\002\000\004" +
    "\027\143\001\002\000\010\004\052\005\053\032\141\001" +
    "\002\000\004\027\132\001\002\000\050\004\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\020\uffd7\021" +
    "\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\027\uffd7\030\uffd7" +
    "\032\uffd7\036\uffd7\040\uffd7\041\uffd7\001\002\000\004\002" +
    "\000\001\002\000\012\005\014\027\022\040\020\041\044" +
    "\001\002\000\034\004\uffe7\005\uffe7\006\057\007\056\010" +
    "\055\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\030\uffe7\032\uffe7\001\002\000\004\002\uffcc\001\002\000" +
    "\004\027\075\001\002\000\040\004\uffdb\005\uffdb\006\uffdb" +
    "\007\uffdb\010\uffdb\011\070\012\071\020\uffdb\021\uffdb\022" +
    "\uffdb\023\uffdb\024\uffdb\025\uffdb\030\uffdb\032\uffdb\001\002" +
    "\000\034\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\020" +
    "\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\030\uffdf" +
    "\032\uffdf\001\002\000\032\002\ufff0\005\ufff0\013\ufff0\014" +
    "\ufff0\015\ufff0\016\ufff0\017\ufff0\027\ufff0\033\ufff0\035\ufff0" +
    "\040\ufff0\041\ufff0\001\002\000\034\004\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3" +
    "\024\uffe3\025\uffe3\030\uffe3\032\uffe3\001\002\000\032\002" +
    "\ufffd\005\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd" +
    "\027\ufffd\033\ufffd\035\ufffd\040\ufffd\041\ufffd\001\002\000" +
    "\024\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8" +
    "\012\uffd8\026\034\032\uffd8\001\002\000\012\005\014\027" +
    "\022\040\020\041\037\001\002\000\010\004\052\005\053" +
    "\032\051\001\002\000\004\032\047\001\002\000\024\004" +
    "\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8" +
    "\027\040\032\uffd8\001\002\000\014\027\ufff3\030\ufff3\036" +
    "\ufff3\040\ufff3\041\ufff3\001\002\000\014\027\022\030\045" +
    "\036\043\040\020\041\044\001\002\000\014\027\ufff2\030" +
    "\ufff2\036\ufff2\040\ufff2\041\ufff2\001\002\000\010\027\022" +
    "\040\020\041\044\001\002\000\050\004\uffd8\005\uffd8\006" +
    "\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\024\uffd8\025\uffd8\027\uffd8\030\uffd8\032" +
    "\uffd8\036\uffd8\040\uffd8\041\uffd8\001\002\000\004\032\uffe8" +
    "\001\002\000\014\027\ufff1\030\ufff1\036\ufff1\040\ufff1\041" +
    "\ufff1\001\002\000\004\033\050\001\002\000\036\002\uffe9" +
    "\005\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\027" +
    "\uffe9\031\uffe9\033\uffe9\035\uffe9\037\uffe9\040\uffe9\041\uffe9" +
    "\001\002\000\004\033\067\001\002\000\010\027\022\040" +
    "\020\041\044\001\002\000\010\027\022\040\020\041\044" +
    "\001\002\000\034\004\uffe4\005\uffe4\006\057\007\056\010" +
    "\055\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\030\uffe4\032\uffe4\001\002\000\010\027\022\040\020\041" +
    "\044\001\002\000\010\027\022\040\020\041\044\001\002" +
    "\000\010\027\022\040\020\041\044\001\002\000\034\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\020\uffe2\021\uffe2" +
    "\022\uffe2\023\uffe2\024\uffe2\025\uffe2\030\uffe2\032\uffe2\001" +
    "\002\000\034\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde" +
    "\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\030" +
    "\uffde\032\uffde\001\002\000\034\004\uffe1\005\uffe1\006\uffe1" +
    "\007\uffe1\010\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\030\uffe1\032\uffe1\001\002\000\034\004\uffdd" +
    "\005\uffdd\006\uffdd\007\uffdd\010\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\030\uffdd\032\uffdd\001\002" +
    "\000\034\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\020" +
    "\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\030\uffe0" +
    "\032\uffe0\001\002\000\034\004\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\010\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\030\uffdc\032\uffdc\001\002\000\034\004\uffe5\005" +
    "\uffe5\006\057\007\056\010\055\020\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\030\uffe5\032\uffe5\001\002\000" +
    "\036\002\uffea\005\uffea\013\uffea\014\uffea\015\uffea\016\uffea" +
    "\017\uffea\027\uffea\031\uffea\033\uffea\035\uffea\037\uffea\040" +
    "\uffea\041\uffea\001\002\000\010\027\022\040\020\041\044" +
    "\001\002\000\010\027\022\040\020\041\044\001\002\000" +
    "\034\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\030\uffd9\032" +
    "\uffd9\001\002\000\036\004\uffdb\005\uffdb\006\uffdb\007\uffdb" +
    "\010\uffdb\011\070\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\030\uffdb\032\uffdb\001\002\000\034\004\uffda" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\025\uffda\030\uffda\032\uffda\001\002" +
    "\000\014\005\014\027\022\040\020\041\044\042\077\001" +
    "\002\000\016\004\052\005\053\020\120\021\123\022\121" +
    "\023\122\001\002\000\010\024\uffd2\025\uffd2\030\uffd2\001" +
    "\002\000\010\024\115\025\114\030\uffd5\001\002\000\004" +
    "\030\102\001\002\000\004\033\103\001\002\000\024\005" +
    "\ufffe\013\ufffe\014\ufffe\015\ufffe\016\ufffe\017\ufffe\027\ufffe" +
    "\040\ufffe\041\ufffe\001\002\000\024\005\014\013\106\014" +
    "\025\015\105\016\015\017\017\027\022\040\020\041\033" +
    "\001\002\000\004\033\110\001\002\000\004\033\107\001" +
    "\002\000\032\002\uffef\005\uffef\013\uffef\014\uffef\015\uffef" +
    "\016\uffef\017\uffef\027\uffef\033\uffef\035\uffef\040\uffef\041" +
    "\uffef\001\002\000\022\005\ufffe\013\ufffe\014\ufffe\016\ufffe" +
    "\017\ufffe\027\ufffe\040\ufffe\041\ufffe\001\002\000\022\005" +
    "\014\013\112\014\025\016\015\017\017\027\022\040\020" +
    "\041\033\001\002\000\004\033\113\001\002\000\032\002" +
    "\uffee\005\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee" +
    "\027\uffee\033\uffee\035\uffee\040\uffee\041\uffee\001\002\000" +
    "\014\005\014\027\022\040\020\041\044\042\077\001\002" +
    "\000\014\005\014\027\022\040\020\041\044\042\077\001" +
    "\002\000\004\030\uffd4\001\002\000\004\030\uffd3\001\002" +
    "\000\012\005\014\027\022\040\020\041\044\001\002\000" +
    "\012\005\014\027\022\040\020\041\044\001\002\000\012" +
    "\005\014\027\022\040\020\041\044\001\002\000\012\005" +
    "\014\027\022\040\020\041\044\001\002\000\014\004\052" +
    "\005\053\024\uffd0\025\uffd0\030\uffd0\001\002\000\014\004" +
    "\052\005\053\024\uffce\025\uffce\030\uffce\001\002\000\014" +
    "\004\052\005\053\024\uffcf\025\uffcf\030\uffcf\001\002\000" +
    "\014\004\052\005\053\024\uffd1\025\uffd1\030\uffd1\001\002" +
    "\000\010\004\052\005\053\030\131\001\002\000\050\004" +
    "\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6" +
    "\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\027" +
    "\uffd6\030\uffd6\032\uffd6\036\uffd6\040\uffd6\041\uffd6\001\002" +
    "\000\014\005\014\027\022\040\020\041\044\042\077\001" +
    "\002\000\004\030\134\001\002\000\004\033\135\001\002" +
    "\000\022\005\ufffe\013\ufffe\014\ufffe\016\ufffe\017\ufffe\027" +
    "\ufffe\040\ufffe\041\ufffe\001\002\000\022\005\014\013\137" +
    "\014\025\016\015\017\017\027\022\040\020\041\033\001" +
    "\002\000\004\033\140\001\002\000\032\002\uffed\005\uffed" +
    "\013\uffed\014\uffed\015\uffed\016\uffed\017\uffed\027\uffed\033" +
    "\uffed\035\uffed\040\uffed\041\uffed\001\002\000\004\033\142" +
    "\001\002\000\036\002\uffeb\005\uffeb\013\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\027\uffeb\031\uffeb\033\uffeb\035\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\001\002\000\014\005\014\027" +
    "\022\040\020\041\044\042\077\001\002\000\004\030\145" +
    "\001\002\000\004\033\146\001\002\000\022\005\ufffe\013" +
    "\ufffe\014\ufffe\016\ufffe\017\ufffe\027\ufffe\040\ufffe\041\ufffe" +
    "\001\002\000\022\005\014\013\150\014\025\016\015\017" +
    "\017\027\022\040\020\041\033\001\002\000\004\033\151" +
    "\001\002\000\032\002\uffec\005\uffec\013\uffec\014\uffec\015" +
    "\uffec\016\uffec\017\uffec\027\uffec\033\uffec\035\uffec\040\uffec" +
    "\041\uffec\001\002\000\034\004\uffe6\005\uffe6\006\057\007" +
    "\056\010\055\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\030\uffe6\032\uffe6\001\002\000\004\027\154\001" +
    "\002\000\010\030\ufff6\036\ufff6\041\ufff6\001\002\000\010" +
    "\030\160\036\156\041\157\001\002\000\004\041\170\001" +
    "\002\000\010\030\ufff5\036\ufff5\041\ufff5\001\002\000\004" +
    "\034\161\001\002\000\004\033\164\001\002\000\004\033" +
    "\163\001\002\000\026\002\ufff7\005\ufff7\014\ufff7\016\ufff7" +
    "\017\ufff7\027\ufff7\033\ufff7\037\ufff7\040\ufff7\041\ufff7\001" +
    "\002\000\024\005\ufffa\014\ufffa\016\ufffa\017\ufffa\027\ufffa" +
    "\031\ufffa\035\ufffa\040\ufffa\041\ufffa\001\002\000\024\005" +
    "\ufffe\014\ufffe\016\ufffe\017\ufffe\027\ufffe\031\006\035\ufffe" +
    "\040\ufffe\041\ufffe\001\002\000\022\005\014\014\025\016" +
    "\015\017\017\027\022\035\167\040\020\041\033\001\002" +
    "\000\004\033\uffff\001\002\000\010\030\ufff4\036\ufff4\041" +
    "\ufff4\001\002\000\004\026\172\001\002\000\012\005\014" +
    "\027\022\040\020\041\033\001\002\000\032\002\ufff8\005" +
    "\ufff8\014\ufff8\016\ufff8\017\ufff8\027\ufff8\031\ufff8\033\ufff8" +
    "\035\ufff8\037\ufff8\040\ufff8\041\ufff8\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\172\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\006\005\007\010\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\012\021\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\012\031\013\027" +
    "\014\025\015\022\016\030\017\015\020\026\025\020\001" +
    "\001\000\012\014\025\015\151\016\030\020\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\014\025\015\022" +
    "\016\030\017\127\020\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\011\035\014\025\015\022" +
    "\016\030\017\034\020\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\040\001\001" +
    "\000\004\014\041\001\001\000\002\001\001\000\004\014" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\014\025\015\065\016\030\020\026\001\001" +
    "\000\012\014\025\015\053\016\030\020\026\001\001\000" +
    "\002\001\001\000\010\014\025\016\063\020\064\001\001" +
    "\000\010\014\025\016\061\020\062\001\001\000\010\014" +
    "\025\016\057\020\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\072\016\073\001\001\000\004\014\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\014\025\015\022\016\030\017\075\020\026\023" +
    "\100\024\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\103\001\001\000\020\012\031\013\027\014\025" +
    "\015\022\016\030\017\015\020\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\110" +
    "\001\001\000\020\012\031\013\027\014\025\015\022\016" +
    "\030\017\015\020\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\014\025\015\022\016\030\017\075\020" +
    "\026\024\116\001\001\000\016\014\025\015\022\016\030" +
    "\017\075\020\026\024\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\025\015\022\016\030\017\126" +
    "\020\026\001\001\000\014\014\025\015\022\016\030\017" +
    "\125\020\026\001\001\000\014\014\025\015\022\016\030" +
    "\017\124\020\026\001\001\000\014\014\025\015\022\016" +
    "\030\017\123\020\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\014\025\015\022\016\030" +
    "\017\075\020\026\023\132\024\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\135\001\001\000\020" +
    "\012\031\013\027\014\025\015\022\016\030\017\015\020" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\014\025\015\022\016" +
    "\030\017\075\020\026\023\143\024\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\146\001\001\000" +
    "\020\012\031\013\027\014\025\015\022\016\030\017\015" +
    "\020\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\164\001\001\000\006\004" +
    "\165\010\006\001\001\000\020\012\031\013\027\014\025" +
    "\015\022\016\030\017\015\020\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\013\172" +
    "\014\025\015\022\016\030\017\015\020\026\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ENDE ::= SEP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENDE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ENDE ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENDE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CONDITION ::= SUM BIGGER SUM 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction p2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionCompareOpertor(BinaryOperator.BIGGER, p1, p2 ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CONDITION ::= SUM LESS SUM 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction p2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionCompareOpertor(BinaryOperator.LESS, p1, p2 ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CONDITION ::= SUM NOTEQUAL SUM 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction p2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionCompareOpertor(BinaryOperator.NOTEQUAL, p1, p2 ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CONDITION ::= SUM EQUAL SUM 
            {
              Object RESULT =null;
		int p1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p1 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction p2 = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionCompareOpertor(BinaryOperator.EQUAL, p1, p2 ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CONDITION ::= BOOLCONST 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITION",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CONDITIONAL_EXPRESSION ::= CONDITION AND CONDITION 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionAnd(c1,c2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONAL_EXPRESSION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CONDITIONAL_EXPRESSION ::= CONDITION OR CONDITION 
            {
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionOr(c1,c2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONAL_EXPRESSION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONDITIONAL_EXPRESSION ::= CONDITION 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDITIONAL_EXPRESSION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SIMPLE_TERM ::= LPAR SUM RPAR 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_TERM",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SIMPLE_TERM ::= NUMBER 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = InstructionConstant.integer(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_TERM",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SIMPLE_TERM ::= NAME 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionGetVariable(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SIMPLE_TERM",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ROOT ::= SIMPLE_TERM ROO SIMPLE_TERM 
            {
              Instruction RESULT =null;
		int srleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int srright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction sr = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction sst = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.ROO, sr, sst); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROOT",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // POWER ::= SIMPLE_TERM POW POWER 
            {
              Instruction RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction st = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.POW, st, pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("POWER",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // POWER ::= SIMPLE_TERM 
            {
              Instruction RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction st = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = st; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("POWER",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PRODUCT ::= PRODUCT MOD ROOT 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.MOD, p, pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PRODUCT ::= PRODUCT DIV ROOT 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.DIV, p, pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PRODUCT ::= PRODUCT TIMES ROOT 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.TIMES, p, pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PRODUCT ::= ROOT 
            {
              Instruction RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PRODUCT ::= PRODUCT MOD POWER 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.MOD, p, pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PRODUCT ::= PRODUCT DIV POWER 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.DIV, p, pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PRODUCT ::= PRODUCT TIMES POWER 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.TIMES, p, pp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PRODUCT ::= POWER 
            {
              Instruction RESULT =null;
		int ppleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ppright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction pp = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = pp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRODUCT",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SUM ::= SUM MINUS PRODUCT 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.MINUS, s, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUM",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SUM ::= SUM PLUS PRODUCT 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionBinaryOperation(BinaryOperator.PLUS, s, p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUM",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SUM ::= MINUS PRODUCT 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionNegate(p); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUM",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SUM ::= PRODUCT 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SUM",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // METHOD_CALL ::= NAME LPAR ARGUMENT_LIST RPAR 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> al = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstructionMethodCall(n,al); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD_CALL",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SINGLE_LINE_STATEMENT ::= NAME ASSIGN METHOD_CALL SEMICOLON SEP 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction m = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new InstructionSetVariable(n, m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SINGLE_LINE_STATEMENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SINGLE_LINE_STATEMENT ::= NAME ASSIGN SUM SEMICOLON SEP 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new InstructionSetVariable(n, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SINGLE_LINE_STATEMENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SINGLE_LINE_STATEMENT ::= SUM SEMICOLON SEP 
            {
              Instruction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruction p = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SINGLE_LINE_STATEMENT",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // STATEMENT ::= WHILE LPAR CONDITIONAL_EXPRESSION RPAR SEP STATEMENT_LIST END SEP 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> s = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new InstructionForWhile(s, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // STATEMENT ::= FOR LPAR CONDITIONAL_EXPRESSION RPAR SEP STATEMENT_LIST END SEP 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> s = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new InstructionForWhile(s, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // STATEMENT ::= IF LPAR CONDITIONAL_EXPRESSION RPAR SEP STATEMENT_LIST ELSE SEP STATEMENT_LIST END SEP 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<Instruction> s1 = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> s2 = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new InstructionIfElse(s1, s2, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // STATEMENT ::= IF LPAR CONDITIONAL_EXPRESSION RPAR SEP STATEMENT_LIST END SEP 
            {
              Instruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> s1 = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new InstructionIfElse(s1, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STATEMENT ::= SINGLE_LINE_STATEMENT 
            {
              Instruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARGUMENT_LIST ::= ARGUMENT_LIST COMMA SIMPLE_TERM 
            {
              ArrayList<Instruction> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> al = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = al; RESULT.add(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENT_LIST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARGUMENT_LIST ::= ARGUMENT_LIST SIMPLE_TERM 
            {
              ArrayList<Instruction> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> al = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = al; RESULT.add(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENT_LIST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ARGUMENT_LIST ::= 
            {
              ArrayList<Instruction> RESULT =null;
		  RESULT = new ArrayList<Instruction>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGUMENT_LIST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PARAMETER_LIST ::= PARAMETER_LIST COMMA NAME 
            {
              ArrayList<String> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = pl; RESULT.add(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER_LIST",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAMETER_LIST ::= PARAMETER_LIST NAME 
            {
              ArrayList<String> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = pl; RESULT.add(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER_LIST",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAMETER_LIST ::= 
            {
              ArrayList<String> RESULT =null;
		  RESULT = new ArrayList<String>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER_LIST",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // METHOD ::= FUNCTION NAME LPAR PARAMETER_LIST RPAR BLOCK SEP 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstructionMethod(n, pl, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ASSIGNMENT ::= VAR NAME ASSIGN SINGLE_LINE_STATEMENT 
            {
              Instruction RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new InstructionInitVariable(n, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ASSIGNMENT_LIST ::= ASSIGNMENT_LIST ASSIGNMENT 
            {
              ArrayList<Instruction> RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> al = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction a = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = al; RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_LIST",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ASSIGNMENT_LIST ::= 
            {
              ArrayList<Instruction> RESULT =null;
		  RESULT = new ArrayList<Instruction>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASSIGNMENT_LIST",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // METHOD_LIST ::= METHOD_LIST METHOD 
            {
              ArrayList<Instruction> RESULT =null;
		int mlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> ml = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction m = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = ml; RESULT.add(m); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // METHOD_LIST ::= 
            {
              ArrayList<Instruction> RESULT =null;
		  RESULT = new ArrayList<Instruction>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METHOD_LIST",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // STATEMENT_LIST ::= STATEMENT_LIST STATEMENT 
            {
              ArrayList<Instruction> RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> sl = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction s = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = sl;  RESULT.add(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT_LIST",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // STATEMENT_LIST ::= 
            {
              ArrayList<Instruction> RESULT =null;
		  RESULT = new ArrayList<Instruction>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STATEMENT_LIST",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // BLOCK ::= LBRACE SEP ASSIGNMENT_LIST STATEMENT_LIST RBRACE 
            {
              Instruction RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> al = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> sl = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstructionBlock(al, sl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCK",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SCRIPT ::= ASSIGNMENT_LIST METHOD_LIST STATEMENT_LIST ENDE 
            {
              Instruction RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Instruction> a = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int mlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int mlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> ml = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> s = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstructionScript(a, ml, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SCRIPT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SCRIPT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction start_val = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

